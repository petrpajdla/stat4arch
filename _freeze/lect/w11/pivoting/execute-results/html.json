{
  "hash": "5cac21b61e9fddbeed073ecc6d69e021",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Long table and wide table transformations\"\nformat:\n  html: default\n  revealjs:\n    fontsize: 24px\n    output-file: slides_pivoting.html\n    footer: \"[AES_707](https://petrpajdla.github.io/stat4arch/) *Statistics seminar for archaeologists* | [Pivoting](./pivoting.html)\"\n    chalkboard:\n      theme: whiteboard\n      chalk-effect: 0.0\n  pdf: default\nexecute:\n  echo: true\n  warning: false\n  cache: true\n---\n\n::: {.cell}\n\n:::\n\n\nYou probably still remember the fictional burial site we have been analysing last class with correspondence analysis. Here we have it back again, with two more variables, ID and sex:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|datace | ID|pohlavi | nadoby| sipy| cu_dycka| spondyl| kopytovity_klin| desticka| zrnoterka|\n|:------|--:|:-------|------:|----:|--------:|-------:|---------------:|--------:|---------:|\n|ne.lin |  1|F       |      4|    0|        0|       5|               4|        0|         1|\n|ne.lin |  2|M       |      3|    1|        0|       2|               5|        0|         0|\n|en.zvo |  3|F       |      7|    3|        3|       0|               0|        2|         0|\n|ne.lin |  4|F       |      2|    0|        0|       4|               4|        0|         1|\n\n\n:::\n:::\n\n\nYou can see that there are three variables describing the grave itself (datace, ID, pohlavi) and rest of the columns are __combining two variables in one cell__. One variable is the __type__ of a artefakt and other the __number__ of these artefacts.\n\nAnd if you remember tidy data principles - one object in one in one row, one variable in one column and one value in one cell - you can already feel that we have a problem here.\n  \n![](figs/tidy-1.png)\n\n## Wide table\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|datace | ID|pohlavi | nadoby| sipy| cu_dycka| spondyl| kopytovity_klin| desticka| zrnoterka|\n|:------|--:|:-------|------:|----:|--------:|-------:|---------------:|--------:|---------:|\n|ne.lin |  1|F       |      4|    0|        0|       5|               4|        0|         1|\n|ne.lin |  2|M       |      3|    1|        0|       2|               5|        0|         0|\n|en.zvo |  3|F       |      7|    3|        3|       0|               0|        2|         0|\n|ne.lin |  4|F       |      2|    0|        0|       4|               4|        0|         1|\n\n\n:::\n:::\n\n\nThis type of dataframe is sometimes called __wide table__ - it has plenty of variables in one row. \n\nIt is useful for some analysis such as _correspondence analysis_, but for others it is not. For example, without major manipulations with columns, it is impossible to plot the number of each artefakt in ggplot, because we don't have one single variable to plot on x axis.\n\nIn order to do so, you have to transform wide table to a __long table__ in a way that in one cell there will be only one value of only one variable.\n\n\n## Long table - basic principles {.scrollable}\n\n![](figs/long_table_1.png)\n![](figs/long_table_2.png)\n![](figs/long_table_3.png)\n\n## Long table - how to do it in R\n\nPackage:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nFunction: `pivot_longer`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npohrebiste_long <- pohrebiste %>% \n  pivot_longer(\n    cols = c(\"nadoby\", \"sipy\", \"cu_dycka\", \"spondyl\", \"kopytovity_klin\", \"desticka\", \"zrnoterka\"),\n    names_to = \"artefakt\",\n    values_to = \"pocet\"\n  )\nhead(pohrebiste_long, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   datace    ID pohlavi artefakt        pocet\n   <chr>  <int> <chr>   <chr>           <dbl>\n 1 ne.lin     1 F       nadoby              4\n 2 ne.lin     1 F       sipy                0\n 3 ne.lin     1 F       cu_dycka            0\n 4 ne.lin     1 F       spondyl             5\n 5 ne.lin     1 F       kopytovity_klin     4\n 6 ne.lin     1 F       desticka            0\n 7 ne.lin     1 F       zrnoterka           1\n 8 ne.lin     2 M       nadoby              3\n 9 ne.lin     2 M       sipy                1\n10 ne.lin     2 M       cu_dycka            0\n```\n\n\n:::\n:::\n\n\n\n\n\n## Quick plot\nNow you know what to plot on x axis (artefakt) and what to plot on y axis (pocet) so let's have one very basic plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pohrebiste_long, aes(x=artefakt, y=pocet))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](pivoting_files/figure-html/g1-1.png){width=672}\n:::\n:::\n\n## More fancy\nAnd now do it more fancier and add more variables:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pohrebiste_long, aes(x=artefakt, y=pocet, fill = pohlavi))+\n  geom_col()+\n  labs(x=\"typ artefaktu\", y=\"počet\")+\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](pivoting_files/figure-html/g2-1.png){width=672}\n:::\n:::\n\n\n\n## Oh my, relative values!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pohrebiste_long, aes(x=artefakt, y=pocet, fill = pohlavi))+\n  geom_col(position = \"fill\")+\n  labs(x=\"typ artefaktu\", y=\"počet\")+\n  scale_x_discrete(guide = guide_axis(angle = 30))+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](pivoting_files/figure-html/g3-1.png){width=672}\n:::\n:::\n\n\n## OMG, even two plots!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pohrebiste_long, aes(x=artefakt, y=pocet, fill = pohlavi))+\n  geom_col()+\n  facet_wrap(~pohlavi)+\n  labs(x=\"typ artefaktu\", y=\"počet\")+\n  scale_x_discrete(     guide = guide_axis(angle = 30))+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](pivoting_files/figure-html/g4-1.png){width=672}\n:::\n:::\n\n\n\n## But what if I want to see the numbers for each bar?\nWell, it is possible, but we will need some coding:\n\n- first, we need to calculate sum values for each sex and artefakt and to do so, we will use good old dplyr functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_artefakt <- pohrebiste_long %>% \n  group_by(artefakt, pohlavi) %>% \n  summarise(pocet_artefaktu=sum(pocet))\nhead(sum_artefakt, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   artefakt [3]\n  artefakt        pohlavi pocet_artefaktu\n  <chr>           <chr>             <dbl>\n1 cu_dycka        F                     3\n2 cu_dycka        M                     6\n3 desticka        F                     2\n4 desticka        M                     4\n5 kopytovity_klin F                     8\n6 kopytovity_klin M                     5\n```\n\n\n:::\n:::\n\n\n## Then\n\nThen we can make the same plot as earlier but now we can add there a new layer with text from the summary table we just created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pohrebiste_long, aes(x=artefakt, y=pocet, fill = pohlavi))+\n  geom_bar(stat=\"identity\")+\n  geom_text(data=sum_artefakt, aes(label = pocet_artefaktu, x = artefakt, y=pocet_artefaktu), position = position_stack(vjust = 0.5), color = \"white\")+\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  labs(x=\"typ artefaktu\", y=\"počet\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](pivoting_files/figure-html/g6-1.png){width=672}\n:::\n:::\n\n\nNotice that we are here working with two different (but related) data frames. One is for bar plots and second for text values.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}