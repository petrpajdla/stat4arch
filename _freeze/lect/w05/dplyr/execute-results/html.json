{
  "hash": "ebdc78e28ff21b4c9100e487afa0faee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data manipulation with dplyr\"\nformat:\n  html: default\n  revealjs:\n    fontsize: 24px\n    output-file: slides_dplyr.html\n    footer: \"[AES_707](https://petrpajdla.github.io/stat4arch/) *Statistics seminar for archaeologists* | [`dplyr`](./dplyr.html)\"\n    chalkboard:\n      theme: whiteboard\n      chalk-effect: 0.0\n  pdf: default\nexecute:\n  echo: true\n  warning: false\n---\n\n\n## Data Transformation {background-color=\"#FAF1A4\"}\n\n### Package\n\n- `dplyr`\n\n### Goals\n\nWe will learn how to:\n\n::: {.incremental}\n- select desired variables -- `select()`\n- rename your variables -- `rename()`\n- order them from lowest to highest values (or vice versa) -- `arrange()`\n- filter your data based on different conditions -- `filter()`\n- calculate different summary statistics such as mean or count -- `summarise()`\n- add new variables such as percentage -- `mutate()`\n- work with different functions more effectively -- `%>%`\n- save your results as comma separated file\n:::\n\n\n## Before we begin {background-color=\"#FAF1A4\"}\n\n::: {.incremental}\n- load packages `here` and `dplyr` (don't forget to install them firstly, if you haven't done so yet)\n- open the project from last lecture (or create a new one if you don't have it)\n- create a new script\n- load data [dartpoints.csv](./data/dartpoints.csv) into your script\n- if you are loading data with `here` function don't forget to check whether your data and script are in the **same folder** as your project\n- create an object called *\"sipky\"* from the loaded database (with `<-`)\n:::\n\n\n::: {.cell}\n\n:::\n\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(dplyr)\nsipky <- read.csv(here(\"dartpoints.csv\"))\n```\n:::\n\n:::\n\n## Selecting variables\n\n::: {.incremental}\n- `select(dataframe, variable1, variable2)`\n- sometimes you will need to remove variables you don't need in your work, to have your database more user friendly\n- for example, you need only variables dealing with major proportions of the dartpoints, but your database have plenty of other variables which are making it difficult to observe, like here:\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(sipky)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Name Catalog     TARL  Quad Length Width Thickness B.Width J.Width H.Length\n1 Darl 41-0322 41CV0536 26/59   42.8  15.8       5.8    11.3    10.6     11.6\n2 Darl 35-2946 41CV0235 21/63   40.5  17.4       5.8      NA    13.7     12.9\n3 Darl 35-2921 41CV0132 20/63   37.5  16.3       6.1    12.1    11.3      8.2\n4 Darl 36-3487 41CV0594 10/54   40.3  16.1       6.3    13.5    11.7      8.3\n5 Darl 36-3321 41CV1023 12/58   30.6  17.1       4.0    12.6    11.2      8.9\n6 Darl 35-2959 41CV0235 21/63   41.8  16.8       4.1    12.7    11.5     11.0\n  Weight Blade.Sh Base.Sh Should.Sh Should.Or Haft.Sh Haft.Or\n1    3.6        S       I         S         T       S       E\n2    4.5        S       I         S         T       S       E\n3    3.6        S       I         S         T       S       E\n4    4.0        S       I         S         T       S       E\n5    2.3        S       I         S         T       S       E\n6    3.0        S       E         I         T       I       C\n```\n\n\n:::\n:::\n\n:::\n\n## Selecting variables\n\n- to create a new dataframe, simply use function `select` and define which variables you want to keep\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky <- select(sipky, Name, Length, Width, Weight)\nhead(sipky)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Name Length Width Weight\n1 Darl   42.8  15.8    3.6\n2 Darl   40.5  17.4    4.5\n3 Darl   37.5  16.3    3.6\n4 Darl   40.3  16.1    4.0\n5 Darl   30.6  17.1    2.3\n6 Darl   41.8  16.8    3.0\n```\n\n\n:::\n:::\n\n\n## Renaming variables\n\n::: {.incremental}\n- renaming your variables with function `rename(data, new_name = old_name)` can be useful when dealing with complicated code names or different languages\n- {{< bi lightbulb >}} Hint: don't forget to save object with new variable names by `<-`\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky <- rename(sipky,\n   typ = Name,\n   delka = Length,\n   sirka = Width,\n   hmotnost = Weight)\n\nhead(sipky)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   typ delka sirka hmotnost\n1 Darl  42.8  15.8      3.6\n2 Darl  40.5  17.4      4.5\n3 Darl  37.5  16.3      3.6\n4 Darl  40.3  16.1      4.0\n5 Darl  30.6  17.1      2.3\n6 Darl  41.8  16.8      3.0\n```\n\n\n:::\n:::\n\n:::\n\n## Arranging values in ascending order...\n\n- here you can order your observations from the lowest to highest (or vice versa). To do so, use function `arrange(data, variable)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(arrange(sipky, delka))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   typ delka sirka hmotnost\n1 Darl  30.6  17.1      2.3\n2 Darl  31.2  15.6      2.5\n3 Darl  32.0  16.0      3.3\n4 Darl  32.4  14.5      2.5\n5 Darl  33.1  17.4      4.2\n6 Darl  33.5  16.6      3.2\n```\n\n\n:::\n:::\n\n\n## ...and in descending order\n\n- if you want to order the values from higher to smaller just add `desc()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(arrange(sipky, desc(delka)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         typ delka sirka hmotnost\n1 Pedernales 109.5  49.3     28.8\n2 Pedernales  84.0  21.2      9.3\n3 Pedernales  78.3  28.1     14.8\n4 Pedernales  70.4  30.4     13.1\n5     Travis  69.0  20.9     11.4\n6 Pedernales  67.2  27.1     15.3\n```\n\n\n:::\n:::\n\n\n::: {.fragment}\n{{< bi wrench-adjustable >}} Task: What will happen if you will try to order non-numerical variable, but a categorical variable (such as type of the dartpoint)?\n:::\n\n## Filtering {.scrollable}\n\n::: {.incremental}\n- function `filter(data, variable <operator> value)` allows you to filter your data based on different conditions, for example minimal weight, type of the dartpoint, etc\n- logical and mathematical operators: ==, !=, \\<, \\>, \\>=, \\<=, &, \\|, etc (use `?dplyr::filter` for more details)\n:::\n\n::: {.fragment}\n- here we use `>` to get only dartpoints with the length higher than 80 cm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(sipky, delka > 80)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         typ delka sirka hmotnost\n1 Pedernales 109.5  49.3     28.8\n2 Pedernales  84.0  21.2      9.3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- and here we use `==` to choose only those dartpoints which are of type \"Travis\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(sipky, typ == \"Travis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      typ delka sirka hmotnost\n1  Travis  56.5  21.1      9.5\n2  Travis  54.6  22.4     10.4\n3  Travis  46.3  21.3      7.5\n4  Travis  57.6  18.9      8.7\n5  Travis  49.1  21.4      6.9\n6  Travis  64.6  21.5     15.0\n7  Travis  69.0  20.9     11.4\n8  Travis  40.1  18.4      6.3\n9  Travis  41.5  19.2      7.5\n10 Travis  46.3  17.9      5.9\n11 Travis  39.6  21.5      5.4\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- alternatively, you can exclude all points of a type \"Travis\" by negation `!=`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(filter(sipky, typ != \"Travis\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   typ delka sirka hmotnost\n1 Darl  42.8  15.8      3.6\n2 Darl  40.5  17.4      4.5\n3 Darl  37.5  16.3      3.6\n4 Darl  40.3  16.1      4.0\n5 Darl  30.6  17.1      2.3\n6 Darl  41.8  16.8      3.0\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- add `&` if you want to filter with more than one condition, for example here we will filter all points which are type \"Wells\" **AND** are heavier than 10 grams\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(sipky, typ == \"Wells\" & hmotnost > 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    typ delka sirka hmotnost\n1 Wells  65.4  25.1     12.6\n2 Wells  58.9  24.4     10.5\n3 Wells  63.1  24.7     16.3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- {{< bi wrench-adjustable >}} Task: instead of `&` try operator `|` (**OR**) and see how the result differs\n:::\n\n## Filtering based on a vector\n\n- you can make your code less complicated when you create vector from desired values and then filter all observations which fall into that vector by using operator `%in%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvyber <- c(\"Pedernales\", \"Ensor\")\n\nhead(filter(sipky, typ %in% vyber))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    typ delka sirka hmotnost\n1 Ensor  43.5  20.1      4.6\n2 Ensor  42.1  20.8      5.4\n3 Ensor  42.1  25.1      5.9\n4 Ensor  43.1  20.0      5.1\n5 Ensor  37.5  21.8      4.7\n6 Ensor  55.2  22.5      7.2\n```\n\n\n:::\n:::\n\n\n## Summaries \n\n- we already know some functions to calculate basic summaries, for example function `mean`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(sipky$delka)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49.33077\n```\n\n\n:::\n:::\n\n\n::: {.incremental}\n- but if you want to create a new dataframe from calculated statistics, function `summarise(data, new_variable = summary_statistics)` is much more helpfull\n- for summary statistics you can use different functions: `mean()`, `median()`, `sd()`, `min()`..., (use `?summarise` for more details)\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(sipky, delka_prumer = mean(delka))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  delka_prumer\n1     49.33077\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- you can also calculate more summaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(sipky,\n    delka_prumer = mean(delka),\n    delka_sd = sd(delka),\n    delka_min = min(delka),\n    delka_max = max(delka),\n    pocet = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  delka_prumer delka_sd delka_min delka_max pocet\n1     49.33077 12.73619      30.6     109.5    91\n```\n\n\n:::\n:::\n\n:::\n\n## Grouping {.scrollable}\n\n- summaries above were applied on whole dataframe. Here we will learn how to calculate summaries for each type of the dartpoint by using `group_by(data, variable_to_be_grouped_by)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky_typ <- group_by(sipky, typ)\n```\n:::\n\n\n::: {.fragment}\n- at first sight, you don´t see any differences, but they will be visible after applying function `summarise`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(sipky_typ, delka_prumer = mean(delka))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  typ        delka_prumer\n  <fct>             <dbl>\n1 Darl               39.8\n2 Ensor              42.7\n3 Pedernales         57.9\n4 Travis             51.4\n5 Wells              53.1\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- you can also calculate more summaries at once and use `round` to remove unnecessary decimals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(sipky_typ, \n    delka_prumer = round(mean(delka),1),\n    pocet = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  typ        delka_prumer pocet\n  <fct>             <dbl> <int>\n1 Darl               39.8    28\n2 Ensor              42.7    10\n3 Pedernales         57.9    32\n4 Travis             51.4    11\n5 Wells              53.1    10\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- {{< bi wrench-adjustable >}} Task: save the result as a new dataframe \"sipky_sum\" for later work\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky_sum <- summarise(sipky_typ, \n    delka_prumer = round(mean(delka),1),\n    pocet = n())\n```\n:::\n\n:::\n\n## Mutate\n\n::: {.incremental}\n- function `mutate` creates a new variable, here we will show how to add variable with percentages\n- note: `sum` calculates a **total sum** of values from chosen variable (in this case - \"pocet\")\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(sipky_sum,\n   procento = (pocet/sum(pocet))*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  typ        delka_prumer pocet procento\n  <fct>             <dbl> <int>    <dbl>\n1 Darl               39.8    28     30.8\n2 Ensor              42.7    10     11.0\n3 Pedernales         57.9    32     35.2\n4 Travis             51.4    11     12.1\n5 Wells              53.1    10     11.0\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment}\n- {{< bi lightbulb >}} Hint: you can again remove unnecessary decimals by adding `round` but be careful with the right number of the brackets `()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(sipky_sum,\n   procento = round((pocet/sum(pocet))*100, 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  typ        delka_prumer pocet procento\n  <fct>             <dbl> <int>    <dbl>\n1 Darl               39.8    28       31\n2 Ensor              42.7    10       11\n3 Pedernales         57.9    32       35\n4 Travis             51.4    11       12\n5 Wells              53.1    10       11\n```\n\n\n:::\n:::\n\n:::\n\n## Pipe operator\n\n::: {.incremental}\n- when applying plenty of transformation on one dataset \"pipe operator\" (`%>%`) could make your work easier and code shorter and more readable\n- notice you don´t need to repeat the name of the dataframe into every function arguments, since you already specified it in the begining of the \"pipe\"\n:::\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky %>% \n  filter(delka > 70) %>%\n  arrange(delka)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         typ delka sirka hmotnost\n1 Pedernales  70.4  30.4     13.1\n2 Pedernales  78.3  28.1     14.8\n3 Pedernales  84.0  21.2      9.3\n4 Pedernales 109.5  49.3     28.8\n```\n\n\n:::\n:::\n\n:::\n\n## More complex summarising with dplyr and pipe\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3-5|6|7|\"}\nsipky %>% \n  group_by(typ) %>% \n  summarise(delka_prum = round(mean(delka), 1),\n    hmotnost_prum = round(mean(hmotnost), 1),\n    pocet = n()) %>%\n  mutate(procento = round((pocet/sum(pocet))*100, 1)) %>% \n  arrange(desc(pocet))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  typ        delka_prum hmotnost_prum pocet procento\n  <fct>           <dbl>         <dbl> <int>    <dbl>\n1 Pedernales       57.9          10.6    32     35.2\n2 Darl             39.8           4.4    28     30.8\n3 Travis           51.4           8.6    11     12.1\n4 Ensor            42.7           5.1    10     11  \n5 Wells            53.1           8.7    10     11  \n```\n\n\n:::\n:::\n\n\n## Visualising your summaries {.auto-animate}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky %>% \n  group_by(typ) %>% \n  summarise(delka_prum = mean(delka),\n    hmotnost_prum = mean(hmotnost),\n    pocet = n()) %>%\n  mutate(procento = round((pocet/sum(pocet))*100,1)) %>% \n  arrange(desc(pocet))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  typ        delka_prum hmotnost_prum pocet procento\n  <fct>           <dbl>         <dbl> <int>    <dbl>\n1 Pedernales       57.9         10.6     32     35.2\n2 Darl             39.8          4.41    28     30.8\n3 Travis           51.4          8.59    11     12.1\n4 Ensor            42.7          5.06    10     11  \n5 Wells            53.1          8.68    10     11  \n```\n\n\n:::\n:::\n\n\n## Visualising your summaries {.auto-animate}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-7|8-12\"}\nsipky %>% \n  group_by(typ) %>% \n  summarise(delka_prum = mean(delka),\n    hmotnost_prum = mean(hmotnost),\n    pocet = n()) %>%\n  mutate(procento = round((pocet/sum(pocet))*100,1)) %>% \n  arrange(desc(pocet)) %>% \n  ggplot() +\n  aes(x = typ, y = delka_prum) +\n  geom_col() +\n  labs(title = \"Průměrná délka šipky\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](dplyr_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## Saving your results\n\n- use `write.csv` for saving your results as a comma separated file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsipky %>% \n  group_by(typ) %>% \n  summarise(delka_prum = mean(delka),\n    hmotnost_prum = mean(hmotnost),\n    pocet = n()) %>%\n  mutate(procento = round((pocet/sum(pocet))*100,1)) %>% \n  arrange(desc(pocet)) %>% \n  write.csv(here(\"sipky_result.csv\"))\n```\n:::\n\n\n::: {.fragment}\n- or save your summarised data frame as an object and save it later\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-7|9|\"}\nsipky_result <- sipky %>% \n  group_by(typ) %>% \n  summarise(delka_prum = mean(delka),\n    hmotnost_prum = mean(hmotnost),\n    pocet = n()) %>%\n  mutate(procento = round((pocet/sum(pocet))*100,1)) %>% \n  arrange(desc(pocet))\n  \nwrite.csv(sipky_result, here(\"sipky_result.csv\"))\n```\n:::\n\n:::\n",
    "supporting": [
      "dplyr_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}