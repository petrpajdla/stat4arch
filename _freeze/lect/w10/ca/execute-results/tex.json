{
  "hash": "d40bc9e8bc3e2f6cf366713b699787c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Correspondence analysis\"\nformat:\n  html: default\n  revealjs:\n    fontsize: 24px\n    output-file: slides_ca.html\n    footer: \"[AES_707](https://petrpajdla.github.io/stat4arch/) *Statistics seminar for archaeologists* | [Correspondence analysis](./ca.html)\"\n    chalkboard:\n      theme: whiteboard\n      chalk-effect: 0.0\n  pdf: default\nexecute:\n  echo: true\n  warning: false\n  cache: true\n---\n\n\n\n\n## Goals\n\n- new ways of data manipulation\n  - combining vectors into dataframe\n  - columns, rows and values selection\n  - mathematical operations in rows\n- some fancy stuff to make your ggplot look better\n- introduction to the correspondence analysis in R\n\n## Data Manipulation {background-color=\"steelblue\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Vectors\n- you already know __vector__ - a combination of several values stored in a single object\n\n::: {.incremental}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncisla <- c(1:10)\ncisla\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstovky <- c(101:110)\nstovky\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 101 102 103 104 105 106 107 108 109 110\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npismena <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")\npismena\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Combining different vectors with rbind and cbind\n\n- you can combine different vectors into __matrixes__ or __dataframes__\n- `rbind()` combine vectors into **R**ows, `cbind()` into **C**olumns\n- the vectors have to be of the same length!\n\n- `cbind`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsloupce <- cbind(cisla, stovky, pismena)\nhead(sloupce, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cisla stovky pismena\n[1,] \"1\"   \"101\"  \"a\"    \n[2,] \"2\"   \"102\"  \"b\"    \n[3,] \"3\"   \"103\"  \"c\"    \n[4,] \"4\"   \"104\"  \"d\"    \n[5,] \"5\"   \"105\"  \"e\"    \n```\n\n\n:::\n:::\n\n\n\n\n- `rbind`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nradky <- rbind(cisla, stovky, pismena)\nradky\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10]\ncisla   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\" \nstovky  \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\" \"109\" \"110\"\npismena \"a\"   \"b\"   \"c\"   \"d\"   \"e\"   \"f\"   \"g\"   \"h\"   \"i\"   \"j\"  \n```\n\n\n:::\n:::\n\n\n\n\n## Dataframe\n\nYou can then very simply create a dataframe:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka <- data.frame(sloupce)\n```\n:::\n\n\n\nBut you have to check whether the numbers are really numbers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(tabulka)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10 obs. of  3 variables:\n $ cisla  : chr  \"1\" \"2\" \"3\" \"4\" ...\n $ stovky : chr  \"101\" \"102\" \"103\" \"104\" ...\n $ pismena: chr  \"a\" \"b\" \"c\" \"d\" ...\n```\n\n\n:::\n:::\n\n\n\n\nWhoa! The numbers are not numbers but characters. You will have to fix it by `as.numeric()` if you want to do mathematical operations. It is also a good practice to always check the structure of your dataframe before carrying out any operations.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka$cisla <- as.numeric(tabulka$cisla)\ntabulka$stovky <- as.numeric(tabulka$stovky)\nstr(tabulka)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10 obs. of  3 variables:\n $ cisla  : num  1 2 3 4 5 6 7 8 9 10\n $ stovky : num  101 102 103 104 105 106 107 108 109 110\n $ pismena: chr  \"a\" \"b\" \"c\" \"d\" ...\n```\n\n\n:::\n:::\n\n\n\n\n## Square brackets\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena\n1     1    101       a\n2     2    102       b\n3     3    103       c\n4     4    104       d\n```\n\n\n:::\n:::\n\n\n\n- with square brackets `[]` you can easily select specific columns, rows or cells\n- `your_dataframe[row number, column number]`\n\n- 1st row:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka[1,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena\n1     1    101       a\n```\n\n\n:::\n:::\n\n\n\n\n- 1st column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n\n- value in the 1st row and 2nd column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka[1,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101\n```\n\n\n:::\n:::\n\n\n\n\n## Mathematics in dataframes\n\nNow you can make some mathematical operations by selecting specific cells with square brackets:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka[1,2] + tabulka[2,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 203\n```\n\n\n:::\n:::\n\n\n\n\nYou can even create a new column with the results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka$novy_sloupec <-tabulka[,1] + 10\nhead(tabulka, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena novy_sloupec\n1     1    101       a           11\n2     2    102       b           12\n3     3    103       c           13\n4     4    104       d           14\n```\n\n\n:::\n:::\n\n\n\n\n- or alternatilevy use `mutate()` function from `dplyr` package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ntabulka<-mutate(tabulka, este_jeden_sloupec = tabulka[,1] + 100)\nhead(tabulka,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena novy_sloupec este_jeden_sloupec\n1     1    101       a           11                101\n2     2    102       b           12                102\n3     3    103       c           13                103\n4     4    104       d           14                104\n```\n\n\n:::\n:::\n\n\n\n\n## rowSums\n\n- you can calculate sums of specific columuns in each row by `rowSums()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka_1 <- tabulka\ntabulka_1$sucet <- rowSums(tabulka_1[,1:2])\nhead(tabulka_1, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena novy_sloupec este_jeden_sloupec sucet\n1     1    101       a           11                101   102\n2     2    102       b           12                102   104\n3     3    103       c           13                103   106\n4     4    104       d           14                104   108\n```\n\n\n:::\n:::\n\n\n\n\n- altenative solution in `dplyr`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabulka <- tabulka %>% \n  mutate(sucet = cisla + stovky)\nhead(tabulka,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cisla stovky pismena novy_sloupec este_jeden_sloupec sucet\n1     1    101       a           11                101   102\n2     2    102       b           12                102   104\n3     3    103       c           13                103   106\n4     4    104       d           14                104   108\n```\n\n\n:::\n:::\n\n\n\n\n\n## colnames {.scrollable}\n\n- sometimes you will need to select names of the columns to rename them or create specific vector from them\n- you can manipulate with column names with function `colnames()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnazvy_sloupcu <- colnames(tabulka)\nnazvy_sloupcu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cisla\"              \"stovky\"             \"pismena\"           \n[4] \"novy_sloupec\"       \"este_jeden_sloupec\" \"sucet\"             \n```\n\n\n:::\n:::\n\n\n\n\nLet's have a look on table `radky`, the colnames look bit strange\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(radky)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         X1  X2  X3  X4  X5  X6  X7  X8  X9 X10\ncisla     1   2   3   4   5   6   7   8   9  10\nstovky  101 102 103 104 105 106 107 108 109 110\npismena   a   b   c   d   e   f   g   h   i   j\n```\n\n\n:::\n:::\n\n\n\nLet's say we will name the columns after the values in `pismena` row\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(radky)<- radky[3,]\nhead(radky, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        a     b     c     d     e     f     g     h     i     j    \ncisla   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\" \nstovky  \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\" \"109\" \"110\"\npismena \"a\"   \"b\"   \"c\"   \"d\"   \"e\"   \"f\"   \"g\"   \"h\"   \"i\"   \"j\"  \n```\n\n\n:::\n:::\n\n\n\n\nYou can also remove row used for column names:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nradky <- radky[-3,]\nradky<-data.frame(radky)\nradky\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         a   b   c   d   e   f   g   h   i   j\ncisla    1   2   3   4   5   6   7   8   9  10\nstovky 101 102 103 104 105 106 107 108 109 110\n```\n\n\n:::\n:::\n\n\n\n\n\n## Exercise {background-color=\"steelblue\"}\n\n## Exercise\n\n1. copy, paste and run this chunk code from our website:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatace <- c(\"ne.lin\", \"ne.lin\", \"en.zvo\", \"ne.lin\", \"en.zvo\", \"en.zvo\")\nnadoby <- c(4, 3, 7, 2, 4, 3)\nsipy <- c(0,1,3,0, 2, 4)\ncu_dycka <- c(0,0,3,0, 4,2)\nspondyl <- c(5,2,0,4, 0, 0)\nkopytovity_klin <- c(4,5,0,4, 0, 0)\ndesticka <- c(0,0,2,0,1, 3)\nzrnoterka <- c(1, 0, 0, 1, 0, 0)\n\npohrebiste <- data.frame(datace, nadoby, sipy, cu_dycka, spondyl, kopytovity_klin, desticka, zrnoterka)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npohrebiste\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  datace nadoby sipy cu_dycka spondyl kopytovity_klin desticka zrnoterka\n1 ne.lin      4    0        0       5               4        0         1\n2 ne.lin      3    1        0       2               5        0         0\n3 en.zvo      7    3        3       0               0        2         0\n4 ne.lin      2    0        0       4               4        0         1\n5 en.zvo      4    2        4       0               0        1         0\n6 en.zvo      3    4        2       0               0        3         0\n```\n\n\n:::\n:::\n\n\n\n\n2. create a new column with the sum of the artefacts found in each grave\n3. create a new column called \"ID\" where each grave has an unique number\n\n\n## Solution\n\n2. create a new column with the sum of the artefacts found in each grave\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npohrebiste_2 <- pohrebiste\npohrebiste_2$pocet_artefaktu <- rowSums(pohrebiste[, 2:8])\npohrebiste_2$ID <- c(1:6)\npohrebiste_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  datace nadoby sipy cu_dycka spondyl kopytovity_klin desticka zrnoterka\n1 ne.lin      4    0        0       5               4        0         1\n2 ne.lin      3    1        0       2               5        0         0\n3 en.zvo      7    3        3       0               0        2         0\n4 ne.lin      2    0        0       4               4        0         1\n5 en.zvo      4    2        4       0               0        1         0\n6 en.zvo      3    4        2       0               0        3         0\n  pocet_artefaktu ID\n1              14  1\n2              11  2\n3              15  3\n4              11  4\n5              11  5\n6              12  6\n```\n\n\n:::\n:::\n\n\n\n\n- alternative solution with package `dplyr`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npohrebiste <- pohrebiste %>% \n  mutate(pocet_artefaktu= rowSums(pohrebiste[,2:8]),\n         ID = c(1:6))\n\nhead(pohrebiste, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  datace nadoby sipy cu_dycka spondyl kopytovity_klin desticka zrnoterka\n1 ne.lin      4    0        0       5               4        0         1\n2 ne.lin      3    1        0       2               5        0         0\n3 en.zvo      7    3        3       0               0        2         0\n  pocet_artefaktu ID\n1              14  1\n2              11  2\n3              15  3\n```\n\n\n:::\n:::\n\n\n\n\n\n## Correspondence analysis (CA) {background-color=\"steelblue\"}\n\n\n## A bit of theory\n\n- one of the multivatiate statistical methods\n- suitable for __contingency tables__ (_kontingenční tabulka_) where you have __counts__ of two or more categorical variables\n- one type of variable are stored in rows, other in columns \n- typicaly, you can visualise result of CA with scatterplots\n\n## A simple contingency table\n\n- now, have a look at this simple contingency table of an fictional Bell Beaker burial site: one variable is sex of buried individuals (columns), second the position of their bodies (rows)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|           | male| female|\n|:----------|----:|------:|\n|left side  |   10|      1|\n|right side |    2|     12|\n\n\n:::\n:::\n\n\n\n- already from the first sight it is obvious that females were predominantly buried on their right site and male on their left site\n- correspondence analysis will help you when your contingency table have much more variables and the relations between variables are then much harder to observe\n\n## Use of CA\n\n- typical archaeological uses of CA:\n  - seriation\n  - counts of different types of artefacts (eg. artefacts in burial sites, types of chipped stone industry,...)\n  - presence or absence of different features in archaeological collections (e.g.presence or absence of construction elements in graves)\n- it works only with __discrete numbers__ (_celá čísla_) - i.e. counts, or __dichotomies__ (presence / absence, 1/0)\n\n\n## Quick correspondence analysis\n\n- imagine we have a burial site and want to observe relation between numbers of different types of artefacts found in the graves and between datations of the graves\n\n\n### Research questions\n\n- are there certain types of artefacts related to certain datations?\n- are there differencies within the different datations?\n\n### Materials and methods\n\n- we will use the fictional data from the last exercise, the dataframe \"pohrebiste\" \n- TASKS:\n  - clean your workplace and load the \"pohrebiste\" data from our webpage again\n  - install and load package `ca`\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  datace nadoby sipy cu_dycka spondyl kopytovity_klin desticka zrnoterka\n1 ne.lin      4    0        0       5               4        0         1\n2 ne.lin      3    1        0       2               5        0         0\n3 en.zvo      7    3        3       0               0        2         0\n4 ne.lin      2    0        0       4               4        0         1\n5 en.zvo      4    2        4       0               0        1         0\n6 en.zvo      3    4        2       0               0        3         0\n```\n\n\n:::\n:::\n\n\n\n\n\n## Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ca)\nca_vysledek <- ca(pohrebiste[,2:8])\nplot(ca_vysledek)\n```\n\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n- notice we are running the analysis only with columns which represent number of artefacts (2nd to 8th)\n- also notice there are two types of points in the plot:\n  - blue circles represent row values, which are in this case graves\n  - red triangles represent column values - numbers of specific artefacts\n\n\n## Interpretation\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-30-1.pdf)\n:::\n:::\n\n\n\n\n- there are two clearly distinct groups of graves with distinct types of artefacts\n- on the other hand number of vessels seems to be indifferent to the groups - both grave groups share similar number of ceramic vessels\n- the x axis explains 82 % of the difference between graves and artefacts, y axis only 9 %. This mean that the difference between those two groups is bigger then within them. In other words, the difference between e.g. copper dagger (cu_dycka) and spondylus is much much greater then between the copper dagger and arrow heads (sipy)\n \n \n## Now let's have a closer look\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_vysledek\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Principal inertias (eigenvalues):\n           1        2        3        4        5       \nValue      0.667126 0.069873 0.054181 0.018769 0.001128\nPercentage 82.25%   8.61%    6.68%    2.31%    0.14%   \n\n\n Rows:\n            [,1]      [,2]      [,3]     [,4]      [,5]      [,6]\nMass    0.189189  0.148649  0.202703 0.148649  0.148649  0.162162\nChiDist 0.879868  0.836034  0.738122 1.026842  0.926948  1.011206\nInertia 0.146464  0.103898  0.110437 0.156736  0.127724  0.165817\nDim. 1  1.037358  0.783658 -0.856640 1.225783 -0.979198 -1.083841\nDim. 2  0.450424 -0.963242  0.350276 0.134612  1.561622 -1.635249\n\n\n Columns:\n           nadoby      sipy  cu_dycka  spondyl kopytovity_klin  desticka\nMass     0.310811  0.135135  0.121622 0.148649        0.175676  0.081081\nChiDist  0.300899  0.875803  1.086977 1.097286        1.064182  1.129904\nInertia  0.028141  0.103653  0.143698 0.178978        0.198950  0.103515\nDim. 1  -0.224254 -0.989256 -1.177308 1.297475        1.221578 -1.212896\nDim. 2   0.489148 -1.259831  1.692644 0.297174       -0.720551 -1.666812\n        zrnoterka\nMass     0.027027\nChiDist  1.415361\nInertia  0.054142\nDim. 1   1.385408\nDim. 2   1.106622\n```\n\n\n:::\n:::\n\n\n\n-  you can see that this is not a dataframe, but a so called \"list\" with much complicated structure. Even so, it is possible to extract coordinates of the points (we will show it later) and use them for other analysis or visualisation in ggplot.\n\n\n## The structure of the CA result\n\n-  this looks even more complicated, but don't worry!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(ca_vysledek)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 16\n $ sv        : num [1:5] 0.8168 0.2643 0.2328 0.137 0.0336\n $ nd        : logi NA\n $ rownames  : NULL\n $ rowmass   : num [1:6] 0.189 0.149 0.203 0.149 0.149 ...\n $ rowdist   : num [1:6] 0.88 0.836 0.738 1.027 0.927 ...\n $ rowinertia: num [1:6] 0.146 0.104 0.11 0.157 0.128 ...\n $ rowcoord  : num [1:6, 1:5] 1.037 0.784 -0.857 1.226 -0.979 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:5] \"Dim1\" \"Dim2\" \"Dim3\" \"Dim4\" ...\n $ rowsup    : logi(0) \n $ colnames  : chr [1:7] \"nadoby\" \"sipy\" \"cu_dycka\" \"spondyl\" ...\n $ colmass   : num [1:7] 0.311 0.135 0.122 0.149 0.176 ...\n $ coldist   : num [1:7] 0.301 0.876 1.087 1.097 1.064 ...\n $ colinertia: num [1:7] 0.0281 0.1037 0.1437 0.179 0.1989 ...\n $ colcoord  : num [1:7, 1:5] -0.224 -0.989 -1.177 1.297 1.222 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:7] \"nadoby\" \"sipy\" \"cu_dycka\" \"spondyl\" ...\n  .. ..$ : chr [1:5] \"Dim1\" \"Dim2\" \"Dim3\" \"Dim4\" ...\n $ colsup    : logi(0) \n $ N         : num [1:6, 1:7] 4 3 7 2 4 3 0 1 3 0 ...\n $ call      : language ca.matrix(obj = as.matrix(obj))\n - attr(*, \"class\")= chr \"ca\"\n```\n\n\n:::\n:::\n\n\n\n \n\n## Visualising CA in ggplot\n\n- in order to visualize data in ggplot, they have to be in dataframe format\n- so the first step will be extracting coordinates from the CA result\n- in this case we will extract them from first two dimensions only\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- ca_vysledek$rowcoord[,1]\nx2 <- ca_vysledek$rowcoord[,2]\ny1 <- ca_vysledek$colcoord[,1]\ny2 <- ca_vysledek$colcoord[,2]\n```\n:::\n\n\n\n\n- x1 and x2 represent coordinates of row values (graves), y1 and y2 represent column values (artefacts)\n\n- quick check:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x1,x2)\n```\n\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n## Creating dataframes\n\n- now we need to create dataframes with for both row values and column values\n\n- row values (graves):\n  - in this step, we can combine various variables describing your objects with row values. We have added \"id\" and \"datace\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatace <- data.frame(pohrebiste$datace)\nid <- data.frame(pohrebiste$ID)\ncoord_datace <- data.frame(cbind(datace, x1,x2, id))\ncolnames(coord_datace) <- c(\"Datace\", \"X1\", \"X2\", \"ID\")\nhead(coord_datace, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Datace         X1         X2 ID\n1 ne.lin  1.0373584  0.4504244  1\n2 ne.lin  0.7836584 -0.9632417  2\n3 en.zvo -0.8566397  0.3502757  3\n4 ne.lin  1.2257826  0.1346118  4\n```\n\n\n:::\n:::\n\n\n\n\n\n- column values (artefacts):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartefakty <- data.frame(colnames(pohrebiste[,2:8]))\ncoord_artefakty <- data.frame(cbind(y1, y2))\ncoord_artefakty$artefakty <- rownames(coord_artefakty)\ncolnames(coord_artefakty) <- c(\"Y1\", \"Y2\",\"Artefakty\")\nrownames(coord_artefakty) <- c(1:7)\nhead(coord_artefakty, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Y1         Y2 Artefakty\n1 -0.2242544  0.4891476    nadoby\n2 -0.9892557 -1.2598313      sipy\n3 -1.1773081  1.6926442  cu_dycka\n4  1.2974752  0.2971739   spondyl\n```\n\n\n:::\n:::\n\n\n\n\n\n## A very simple ggplot\n\n- lets have a quick ggplot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_point(data = coord_datace, aes(X1, X2, color = Datace))+\n  geom_point(data = coord_artefakty, aes(Y1, Y2), shape = 17)\n```\n\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-37-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n- notice there are 2 types of values in 2 dataframes, so you need to call `geom_point()` two times\n- in ggplot we can also easily distinguish different datations by color\n\n\n## Advanced ggplot\n\n- now you can play more with adjusting the plot\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-38-1.pdf)\n:::\n:::\n\n\n\n\n\n## Solution\n\n- you can add text to your ggplot by `geom_text()`\n- you can also rename plot labels without the need to rename variables in your original dataframe. To do so, create a vector with label names and then specify it in `geom_text(...,aes(label=your_vector))`\n- for more tips how to adjust text see [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/reference/geom_text.html)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabels_artefacts <- c(\"nádoba\", \"hrot šípu\", \"mědená dýčka\", \"spondylus\", \"kopytovitý klin\", \"nátepní destička\", \"zrnotěrka\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_vline(xintercept = 0, color=\"gray80\", linewidth = 0.75, linetype = \"dashed\")+\n  geom_hline(yintercept = 0, color=\"gray80\", linewidth = 0.75, linetype = \"dashed\")+\n  geom_point(data = coord_datace, aes(X1, X2, colour = Datace), size = 2)+\n  geom_point(data = coord_artefakty, aes(Y1, Y2), shape = 17, size = 2)+\n  geom_text(data = coord_artefakty, aes(label = labels_artefacts, x=Y1, y=Y2), vjust = -1.5)+\n  geom_text(data = coord_datace, aes(label = ID, x=X1, y=X2), vjust = 1.75)+\n  xlim(-1.5, 1.6)+\n  ylim(-1.75, 2)+\n  labs(x=\"Dimenze 1 - 82,3 %\", y=\"Dimenze 2 - 8,6 %\",\n       title = \"Korespondenční analýza fiktivního pohřebiště\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](ca_files/figure-pdf/unnamed-chunk-40-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}