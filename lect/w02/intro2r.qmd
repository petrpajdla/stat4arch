---
title: "Coding in R"
format:
  html: default
  revealjs:
    fontsize: 24px
    output-file: slides_intro2r.html
    footer: "[AES_707](https://petrpajdla.github.io/stat4arch/) *Statistics seminar for archaeologists* | [Coding in R](./intro2r.html)"
  pdf: default
execute:
  echo: true
---

## Reflection on the last week {background-color="#FAF1A4"}

### Tidy data principles

### Readings

![](./figs/vanpool.jpg){width="20%"}


## Objectives

::: {.incremental}

Today's goals...

- Notion of functions vs. objects.
- Intro on R data types (ie. *what types of things are there*).
- Intro on R types of objects (ie. *how things are represented*).
- Subsetting data frames.
- Reading data into R.

:::


## R is a smart calculator...

:::: {.columns}

::: {.column width="50%"}
::: {.fragment}
```{r}
2 + 40
```
:::
::: {.fragment}
```{r}
5^2
```
:::
::: {.fragment}
```{r}
round(6.48^2)
```
:::
::: {.fragment}
```{r}
5 < 10
```
:::
::: {.fragment}
```{r}
sqrt(1764)
```
:::
::: {.fragment}
```{r}
8 * 10^10
```
:::
:::
::: {.column width="50%"}
::: {.fragment}
```{r}
x <- 1
```
:::
::: {.fragment}
```{r}
x
```
:::
::: {.fragment}
```{r}
y <- 41
```
:::
::: {.fragment}
```{r}
x + y
```
:::
::: {.fragment}
```{r}
x > y
```
:::
::: {.fragment}
```{r}
z <- x - y
```
:::
::: {.fragment}
```{r}
z
```
:::
::: {.fragment}
```{r}
(x + y)^2
```
:::
:::
::::

## Functions and objects {.incremental}

:::: {.columns}
::: {.column width="50%"}

#### Objects

- *Anything* is an object.
- Objects contain **data** *(etc.)*
- Objects have **names**.
- You choose the names.
- Name your objects wisely.

::: {.fragment}
```{r}
x <- 1
x
```
:::
::: {.fragment}
```{r}
pi 
```
:::
::: {.fragment}
```{r}
pi + 1
```
:::
::: {.fragment}
`<-` is an *assignment* operator  
(use *Alt + -* in RStudio to write it).
:::

:::
::: {.column width="50%" .fragment}

#### Functions 

- End with parentheses `function(arguments)`.
- **Arguments** go in the parentheses.
- Functions **do** something with the inputs you give them.

::: {.fragment}
```{r}
sqrt(x = 1764)
```
:::
::: {.fragment}
```{r}
args(sqrt)
```
:::
::: {.fragment}
```{r}
round(pi)
```
:::
::: {.fragment}
```{r}
args(round)
```
:::
::: {.fragment}
```{r}
round(pi, digits = 2)
```
:::
:::
::::

## Types of objects

### Vector

- Basic data structure.
- Contains single data type.
- Created using function `c()` *(combine, concatenate)*

::: {.fragment}
```{r}
c("Fuu", "Bar")
```
:::
::: {.fragment}
```{r}
x <- c(1, 3, 5, 8)
x
```
:::
::: {.fragment}
```{r}
x^2
```
:::
::: {.fragment}
```{r}
is.vector(x)
```
:::
::: {.fragment}
```{r}
x >= 4
```
:::
::: {.fragment}
```{r}
length(x)
```
:::


## Types of objects

### Data frame & tibble

:::: {.columns}
::: {.column width="50%"}

- A table.
- Has rows and columns.
- *Rectangular*, ie. identical number of rows in each column.

```{r}
#| echo: false
dfr <- data.frame(
  x = 95:98, 
  y = c("a", "b", "c", "d"),
  z = c(T, F, F, T),
  w = seq(4.2, 4.8, by = 0.2) # sequence
)
```
::: {.fragment}
```{r}
dfr
```
:::
::: {.fragment}
```{r}
is.data.frame(dfr)
```
:::
::: {.fragment}
```{r}
ncol(dfr)
```
:::
::: {.fragment}
```{r}
nrow(dfr)
```
:::
::: {.fragment}
```{r}
head(dfr, n = 2)
```
:::

:::
::: {.column width="50%" .fragment}

#### Subsetting

- `$` operator returns a single column.

::: {.fragment}
```{r}
colnames(dfr)
```
:::
::: {.fragment}
```{r}
dfr$x
```
:::
::: {.fragment}
```{r}
dfr$y
```
:::
::: {.fragment}
```{r}
dfr$z
```
:::
::: {.fragment}
```{r}
dfr$w / 2
```
:::
::: {.fragment}
```{r}
dfr$x - dfr$w
```
:::
::: {.fragment}
```{r}
str(dfr)
```
:::

:::
::::


## Data types

```{r}
str(dfr)
```

:::: {.columns}
::: {.column width="50%" .fragment}

### Text strings

- **Character** data type, abbreviated as *chr*.
- Written in quotation marks (double or single).

```{r}
"I am a string."
x <- 'I am also a string'
is.character(x)
```

- Functions with `is.` prefix:  
  `is.numeric()`, `is.double()` etc.

:::
::: {.column width="50%" .fragment}

### Numbers

- **Integers** (*whole* numbers)
- **Doubles** (decimal numbers)
- **Numeric** (class for all numbers in general)

```{r}
dfr$x 
is.numeric(dfr$x)
dfr$x + dfr$w
mean(dfr$x)
```

:::
::::

## Data types

:::: {.columns}
::: {.column width="50%"}

### Dichotomies

- **Logical** data type.
- Binary/boolean values.
- As `TRUE` and `FALSE` in `R`.

:::
::: {.column width="50%" .fragment}

### Special values

- Missing values as `NA`, ie. *not available*.
- `Inf` and `-Inf` for infinities.
- `NULL` for an object of a zero length.

:::
::::

## Reading data in CSV into R

### Comma separated values (CSV)

- **Plain-text** document.
- Practical **exchange** and **preservation** format for data sets.
- Most open and commercial softwares will allow export in CSV.

- Americas: separated by commas (`,`), period (`.`) as a decimal mark.
- Europe: separated by semicolon (`;`), comma (`,`) as a decimal mark.

::: {.fragment}

### Reading CSV into R

Comma separated:  
`read.csv(file = "path")`

Semicolon separated:  
`read.csv2(file = "path")`

Other delimiter:  
`read.table(file = "path", sep = "separator")`

:::

## Practice {background-color="#B5E2FF"}

### Dart points

![](./figs/dartpoints.png){width="66%"}

*Adapted from Carlson 2011*

## Dart points

:::: {.columns}
::: {.column width="80%"}
![Scatter plot of dart points](./figs/dartpoints_scatter.png){width="100%"}
:::
::: {.column width="20%"}

Measurements on five types of dart points from **Fort Hood** in central Texas (**Darl, Ensor, Pedernales, Travis, and Wells**). The points were recovered during 10 different pedestrian survey projects during the 1980’s and were classified and measured by H. Blaine Ensor… 

:::
::::

## Exercise {background-color="#B5E2FF"}

:::: {.columns}
::: {.column width="60%"}
::::: {.incremental}

1. Download the dataset [{{< bi file-earmark-arrow-down >}} dartpoints.csv](./data/dartpoints.csv)
2. Explore the dataset using spreadsheet editor
3. Save the dataset somwhere you can find it
3. Start **RStudio**
4. Create a script (*Ctrl + Shift + n*)
5. Read the dataset from the path where you saved it  
6. Save it as `darts` object 
7. What kind of an object is it?
7. How many rows and columns does it have?  
8. What columns does it have?
9. What data types are there? What is the structure?
10. Read details about the dataset using `?archdata::DartPoints`  
  {{< bi lightbulb >}} Hints: `read.csv()`, `ncol()` and `nrow()`, `str()`, `colnames()`

:::::
:::
::: {.column width="40%" .fragment}

### Solution

```{r}
#| eval: false
#| code-line-numbers: "1,2|3|4|5,6,7|8|9|10|"
url <- "https://petrpajdla.github.io/stat4arch/lect/w02/data/dartpoints.csv"
download.file(url, "./dartpoints.csv")
darts <- read.csv("./dartpoints.csv")
class(darts)
dim(darts)
nrow(darts)
ncol(darts)
colnames(darts)
head(darts)
str(darts)
```

:::
::::


<!-- ## Assignments {background-color="#BEFAB4"}

- Go through **R Basics** tutorials [here](https://posit.cloud/learn/recipes). -->
