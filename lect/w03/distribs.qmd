---
title: "Summaries and visualization of distributions"
format:
  html: default
  revealjs:
    fontsize: 24px
    output-file: slides_distribs.html
    footer: "[AES_707](https://petrpajdla.github.io/stat4arch/) *Statistics seminar for archaeologists* | [Distributions](./distribs.html)"
    chalkboard:
      theme: whiteboard
      chalk-effect: 0.0
  pdf: default
execute:
  echo: true
---

## Reflection on the last week {background-color="#FAF1A4"}

```{r}
#| echo: false
library(ggplot2)
library(archdata)
data(DartPoints)
dartpoints <- DartPoints
```

## Objectives

At the end of the lecture, you will know how to..

::: {.incremental}
- Organize your **code in scripts**.
- Organize your **work in projects**.
- Count and interpret descriptive statics **characterizing central tendency** of a numeric variable.
- **Describe spread** of a numeric variable.
- **Read plots** for one variable.
- **Create plots** displaying one variable in `ggplot2` package.
- **Understand** what type of **variation occurs within** your variables.
:::

## Organize your work in scripts

:::: {.columns}
::: {.column width=40%}
```{.r filename="dartpoints.r"}
# Analysis of dartpoints data set
# 6. 3. 2024

library(ggplot2)

# data -------------------------------
# read data from CSV
# url: https://petrpajdla.github.io/stat4arch/lect/w02/data/dartpoints.csv
dartpoints <- read.csv("dartpoints.csv")

# structure --------------------------
colnames(dartpoints)
nrow(dartpoints)
ncol(dartpoints)
str(dartpoints)

mean(dartpoints$Length)

# plots ------------------------------
ggplot(data = dartpoints) +
  aes(x = Length) +
  geom_histogram() +
  labs(x = "Length (cm)", y = "Count")
  
  
  
```
:::
::: {.column width=60% .incremental .fragment}
**In RStudio...**

- Create a new script with *Ctrl + Shift + n*
- Put some basic info on what are you doing at the top.  
  **Use comments** `#` (*Ctrl + Shift + c*) to write notes.  
  Comment on the **why**, not the **what**.
- **Divide the code** into sections with *Ctrl + Shift + r*  
  `# Section name ----`
- Load the packages you use at the top of the script.
- RStudio will give you **hints**, hit *Tab* to autocomplete function calls.
- **Execute the current line** with *Ctr + Enter* 
- Source the whole script with *Ctrl + Shift + Enter*
:::
::::

## Organize your work in projects

:::: {.columns}
::: {.column width=40%}
- Each project in a **separate directory**.
- There are **subdirectories** for different parts of the project.
```
~/Documents/
    MyProject/
      code/
        script1.R
        script2.R
      data/
        raw/
          input_dataset.xlsx
        processed/
          settlements.csv
          set_locations.geojson
      figures/
        plot1.png
        plot1.pdf
      MyProject.Rproj
```
- In RStudio go to  
  *Files* > *New Project* > *New Directory*
:::
::: {.column width=60% .fragment}
### Paths 

::: {.fragment}
**Absolute** file path  
The file path is specific to a given user.  
```
C:/Documents/MyProject/data/raw/dartpoints.csv
```
:::

::: {.fragment}
**Relative** file path  
If I am currently in MyProject/ folder:
```
./data/raw/dartpoints.csv
```
:::

::: {.fragment}
Package `here` is here to save the day!

- Do not forget to install the package first.
- Load it at the top of your script.

```{r}
#| eval: false
# install.packages("here")
library(here)
```

- Function `here()` will know where the top directory is.

```{r}
#| eval: false
# read data ----
dartpoints <- read_csv(here("data/processed/settlements.csv"))
```
:::
:::
::::


## Descriptive Statistics {background-color="#B5E2FF"}

## Characterizing centrality

### Mean (*průměr*)
`mean(x)`  
$$ \overline{x} = \frac{x_1 + x_2 + \cdots + x_n}{n} = \frac{1}{n} (\sum^n_{i=1}x_i) $$

:::{.fragment}
### Median (*medián*)
`median(x)`  
- **Robust**, minimizes influence of outliers.
:::

::: {.fragment}
### What are outliers? (*odlehlé hodnoty*)
- **Outliers** are data points that significantly differ from other observations. 
- May indicate a measurement error, an exceptional observation, etc.
:::

## Characterizing centrality

![Various plots of a normal distribution](./figs/normal_distribution.png)


## Characterizing dispersion and/or spread

### Range (*rozpětí*)  
`max(x) - min(x)` or `range(x)`

::: {.fragment}
### Variance and Standard deviation (*rozptyl* a *směrodatná odchylka*)
`sd(x)`  
$$ \sigma = \sqrt{s^2} = \sqrt{\frac{\sum(x_i-\overline{x})^2}{n-1}} $$
:::

::: {.fragment}
### Interquartile range (midspread, IQR, *kvantil*, *mezikvartilové rozpětí*)
`IQR(x)`  
- **Robust**, minimizes influence of outliers.
:::


## Characterizing dispersion and/or spread

![Various plots of a normal distribution](./figs/normal_distribution.png)

## Exercise {background-color="#B5E2FF"}

::: {.incremental}
- Start *RStudio*.
- Create a new project, save it somwhere you can find it.
- Use the dataset from the last lecture [{{< bi file-earmark-arrow-down >}} dartpoints.csv](./data/dartpoints.csv).
- Save it in your project directory.
- Load the data from the CSV file.
- Explore the dataset.
- Count mean and median **weight**, how do they differ?
- What is the range of the weights?
- What is the standard deviation of weights? What does it mean?
- Count the IQR. Compare it with standard deviation.
- {{< bi lightbulb >}} Hints: `read.csv()`, `str()`, `colnames()`, `mean()`, `median()`, `range()`, `sd()`, `IQR()`, `summary()`
:::

## Solution {background-color="#B5E2FF"}

```{r}
# dartpoints <- read.csv("dartpoints.csv")
colnames(dartpoints)
dartpoints$Weight
mean(dartpoints$Weight)
median(dartpoints$Weight)
max(dartpoints$Weight) - min(dartpoints$Weight) # or range(dartpoints$Weight)
sd(dartpoints$Weight)
IQR(dartpoints$Weight)
summary(dartpoints$Weight)
```

## Brainstorming {background-color="#FAF1A4"}

- Why do we visualize data?
- What elements does a *good* graph contain?
- How are these elements called?

![Boxplots from Carlson 2017](./figs/boxplot_carlson-rmbg.png)


## Plots for one variable {background-color="#B5E2FF"}

## Histogram

- **Distribution** of values of a **quantitative** variable.

Distribution of dart point weights.

```{r}
#| echo: false
ggplot(dartpoints) +
  aes(x = Weight) + 
  geom_histogram(color = "black", fill = "white")
```

## Histogram

- **Distribution** of values of a **quantitative** variable.

Distribution of dart point weights, one column (*bin*) equals 2 g.

```{r}
#| echo: false
ggplot(dartpoints) +
  aes(x = Weight) + 
  geom_histogram(color = "black", fill = "white", binwidth = 2)
```

## Density plot

- **Distribution** of values of a **quantitative** variable.

Distribution of dart point weights.

```{r}
#| echo: false
ggplot(dartpoints) +
  aes(x = Weight) + 
  geom_density(color = "black", fill = "white")
```

## Density plot

- **Distribution** of values of a **quantitative** variable, great for **comparisons**.

Distribution of different types of dart points by weight.

```{r}
#| echo: false
ggplot(dartpoints) +
  aes(x = Weight, fill = Name, color = Name) + 
  geom_density(alpha = 0.2) +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1")
```

## Bar chart

- **Distribution** of values of a **qualitative** variable.

Distribution of types of dart points. 

```{r}
#| echo: false
ggplot(dartpoints) +
  aes(x = Name) + 
  geom_bar(color = "black", fill = "white")
```

## Plots in ggplot2 package {background-color="#B5E2FF"}

```{r}
#| eval: false 
#| code-line-numbers: "1|3|5|6|7|"
install.packages("ggplot2") # <1>

library(ggplot2) # <2>

ggplot(data = <your data frame>) + # <3>
  aes(x = <variable to be mapped to axis x>) + # <4>
  geom_<geometry>() # <5>
```

1. Install the package `ggplot2`, do this only once.  
2. Load the package from the library of installed packages, do this for every new script.  
   (Calls to `library()` function are usually written at the top of the script.)  
3. Function `ggplot()` takes the data frame as an argument.  
4. Function `aes()` serves to map *aesthetics* (axis x and y, colors etc.) to different variables from your data frame.  
5. Functons with `geom_` prefix are *geometries*, ie. types of plots to draw.  

::: {.fragment}
Geoms for one variable:

- `geom_histogram()`
- `geom_density()`
- `geom_bar()`
:::

## Layers of ggplot2 {auto-animate=true}

```{r}
ggplot(data = dartpoints)
```

## Layers of ggplot2 {auto-animate=true}

```{r}
ggplot(data = dartpoints) +
  aes(x = Name)
```

## Layers of ggplot2 {auto-animate=true}

```{r}
ggplot(data = dartpoints) +
  aes(x = Name) +
  geom_bar()
```

## Bar chart 

:::: {.columns}
::: {.column width=50% .fragment}
```{r}
ggplot(data = dartpoints) +
  aes(x = Name) + 
  geom_bar()
```
::: {.fragment}
```{r}
ggplot(data = dartpoints) +
  aes(x = Name, color = Name) + 
  geom_bar()
```
:::
:::
::: {.column width=50% .fragment}
```{r}
ggplot(data = dartpoints) +
  aes(x = Name, color = Name, fill = Name) + 
  geom_bar()
```
::: {.fragment}
```{r}
ggplot(data = dartpoints) + 
  aes(x = Name, fill = Name) + 
  geom_bar(color = "black")
```
:::
:::
::::

## Histogram

:::: {.columns}
::: {.column width=50% .fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram()
```
::: {.fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(binwidth = 5)
```
:::
:::
::: {.column width=50% .fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(color = "black")
```
::: {.fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(color = "black", fill = "white")
```
:::
:::
::::

## Density plot 

:::: {.columns}
::: {.column width=50% .fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length) + 
  geom_density()
```
::: {.fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length, color = Name) + 
  geom_density()
```
:::
:::
::: {.column width=50% .fragment}
```{r}
ggplot(dartpoints) +
  aes(x = Length, color = Name, fill = Name) + 
  geom_density()
```
::: {.fragment}
```{r}
ggplot(dartpoints) + 
  aes(x = Length, color = Name, fill = Name) + 
  geom_density(alpha = 0.4)
```
:::
:::
::::

## Labels {auto-animate=true}

```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(binwidth = 5, color = "black", fill = "white")
```

## Labels {auto-animate=true}

```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(binwidth = 5, color = "black", fill = "white") +
  labs(x = "Length (cm)", y = "Count")
```

## Labels {auto-animate=true}

```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(binwidth = 5, color = "black", fill = "white") +
  labs(x = "Length (cm)", y = "Count",
       title = "Histogram of dart point lengths")
```

## Labels {auto-animate=true}

```{r}
ggplot(dartpoints) +
  aes(x = Length) +
  geom_histogram(binwidth = 5, color = "black", fill = "white") +
  labs(x = "Length (cm)", y = "Count",
       title = "Histogram of dart point lengths", 
       caption = "Data adapted from archdata R package, Carlson 2017")
```

## Exercises {background-color="#B5E2FF"}

## Assignments {background-color="#BEFAB4"}

- Read [Make a plot](https://socviz.co/makeplot.html#makeplot) chapter in *Data Visualization* book by K. J. Healy.

### Optional 

- Go through *Visualize data* tutorials [here](https://posit.cloud/learn/recipes).
