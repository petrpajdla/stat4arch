stat4arch
========================================================
author: Petr Pajdla & Peter Tkáč
autosize: true
width: 1920
height: 1080

AES_707: *Statistics seminar for archaeologists*

<!-- <https://support.rstudio.com/hc/en-us/articles/200486468> -->

<!-- =============================================== -->

Seminar 4
========================================================
type: section

`31. 3. 2022`

Today:
<ul style='color:white;'>
  <li>Relationship of two variables (correlation, scatterplots).
  <li>Data manipulation basics (base R and dplyr package).
  <li>Normal distribution.
  <li>Your data sets for the project?
</ul>

<!-- =============================================== -->

Relationship of two variables
========================================================
type: section

<!-- ----------------------------------------------- -->

Correlation
========================================================
incremental: false

- A statistic describing a relationship between two 
**continuous** variables.
- To what degree is a variable *y* explained by *x*?
- Correlation coefficient *r*, from -1 to +1.
- Correlation does **not** imply causation!

- r = 1 -- *strong positive correlation*
- r = 0.5 -- *moderately strong positive correlation*
- r = 0 -- *variables are not correlated*
- r = -0.2 -- *weak negative correlation*
- r = -1 -- *strong negative correlation*

***

- Function `cor(x, y)`

```{r}
x <- 1:100
```
```{r}
cor(x, y = 1:100)
```
```{r}
cor(x, y = 100:1)
```
```{r}
cor(x, y = rnorm(100))
```


<!-- ----------------------------------------------- -->

Scatter plot
========================================================

- Plot displying two continuous variables, *x* and *y*.

- *x axis*: explanatory variable, independent, predictor
- *y axis*: dependent variable, response

```{r echo=FALSE}
plot(rnorm(100), rnorm(100))
```

<!-- ----------------------------------------------- -->

Correlation
========================================================

```{r echo=FALSE}
library(ggplot2)
```
```{r warning=FALSE, fig.width=18, fig.height=10, echo=FALSE}
cor0.9 <- tibble::as_tibble(MASS::mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1, 0.924, 0.924, 1), ncol = 2),
               empirical = TRUE))
cor0.5 <- tibble::as_tibble(MASS::mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1, 0.56, 0.56, 1), ncol = 2),
               empirical = TRUE))
cor0.0 <- tibble::as_tibble(MASS::mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1, 0.08, 0.08, 1), ncol = 2),
               empirical = TRUE))
cor0.6n <- tibble::as_tibble(MASS::mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1, -0.62, -0.62, 1), ncol = 2),
               empirical = TRUE))

g0.9 <- ggplot(cor0.9, aes(V1, V2)) + 
  stat_smooth(method = "lm", se = FALSE) + geom_point() + 
  theme(axis.title = element_blank()) +
  labs(title = "r = 0.924")
g0.5 <- ggplot(cor0.5, aes(V1, V2)) + 
  stat_smooth(method = "lm", se = FALSE) + geom_point() + 
  theme(axis.title = element_blank()) +
  labs(title = "r = 0.560")
g0.0 <- ggplot(cor0.0, aes(V1, V2)) + 
  stat_smooth(method = "lm", se = FALSE) + geom_point() + 
  theme(axis.title = element_blank()) +
  labs(title = "r = 0.080")
g0.6n <- ggplot(cor0.6n, aes(V1, V2)) + 
  stat_smooth(method = "lm", se = FALSE) + geom_point() + 
  theme(axis.title = element_blank()) +
  labs(title = "r = -0.620")

gridExtra::grid.arrange(g0.9, g0.5, g0.0, g0.6n, nrow = 1)
```

<!-- ----------------------------------------------- -->

Spurrious correlations 
========================================================

**Correlation does not imply causality!**

<http://www.tylervigen.com/spurious-correlations>

```{r echo=FALSE}
pets_money <- c(39.7,	41.9,	44.6,	46.8,	49.8,	53.1,	56.9,	61.8,	65.7,	67.1)
died_fall_from_stairs <- c(1307,	1462,	1598,	1588,	1638,	1690,	1818,	1917,	1935,	1960)
correlation <- cor(pets_money, died_fall_from_stairs)
plot(y = pets_money, x = died_fall_from_stairs, type = "b",
     ylab = "Money spent on pets (US, Billions of USD)",
     xlab = "People who died by falling down the stairs (US)",
     main = paste("Correlation coefficient r = ", round(correlation, 3)))
```

<!-- ----------------------------------------------- -->

Guess the correlation game...
========================================================

<http://guessthecorrelation.com/>

<!-- =============================================== -->

Plots for 2 continuous variables
========================================================
type: section

## Packages
```{r}
library(archdata)
library(ggplot2)
```

## Data
```{r}
data(DartPoints)
sipky <- data.frame(DartPoints)
head(sipky,4)
```


Distribution
=========================================================

## Length
```{r}
p <- ggplot(sipky, aes(Length))
p + geom_histogram(binwidth=5)
```
***
## Width
```{r}
p <- ggplot(sipky, aes(Width))
p + geom_histogram(binwidth=5)
```

Correlation - 2 variables
===============================================================
Correlation between length and width
```{r}
p <- ggplot(sipky, aes(Length, Width))
p + geom_point()
```

Correlation - 3 variables
=================================================================
Adding 3th variable (weight) and adjusting size
```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3)
```

Observing trend
=======================================================
```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3) +
  geom_smooth()
```

Correlation - different models
=====================================
`method = "loess"`
```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3) + 
  geom_smooth(method = "loess")
```

***
`method = "lm"`
```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3) + 
  geom_smooth(method = "lm")
```
<!-- --------------------------------
Correlation - logarithmic scale
======================================================
```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3) +
  geom_smooth() +
  scale_x_log10()+
  scale_y_log10()
```
----------------------------------------------->

Small multiples - 4th variable
====================================================

```{r}
p <- ggplot(sipky, aes(Length, Width, color=Weight))
p + geom_point(size=3) +
    facet_wrap(~Name, nrow=1)
```

Manipulating data
========================================================
type: section

<!-- ----------------------------------------------- -->

<!-- =============================================== -->

Normal distribution
========================================================
type: section

```{r echo=FALSE}
library(tibble)
```

<!-- ----------------------------------------------- -->

Normal distribution
========================================================

(*bell-shaped curve, Gaussian distribution*)

<img src="./fig/nd_ideal.jpg" height="600">

<!-- ----------------------------------------------------------------------- -->

One sigma
========================================================
<img src="./fig/nd_1sigma.png" height="700">

<!-- ----------------------------------------------------------------------- -->

Two sigma
========================================================
<img src="./fig/nd_2sigma.png" height="700">

<!-- ----------------------------------------------------------------------- -->

Tree sigma
========================================================
<img src="./fig/nd_3sigma.png" height="700">

<!-- ----------------------------------------------------------------------- -->

Normal distribution in different plots
========================================================

```{r message=FALSE, fig.width=18, fig.height=10, echo=FALSE}
nd <- tibble(x = rnorm(1000, mean = 0, sd = 1))
g_nd <- ggplot(nd, aes(x))
g_nd_y <- ggplot(nd, aes(x = ".identity.", y = x))

hist <- g_nd + geom_histogram() + 
  coord_flip()

dens <- g_nd + geom_density(fill = "white") + 
  coord_flip()

jitt <- g_nd_y + geom_jitter(alpha = 0.2, width = 0.1)

box <- g_nd_y + geom_boxplot()

viol <- g_nd_y + geom_violin()

gridExtra::grid.arrange(jitt, hist, dens, box, viol,  nrow = 1)
```

<!-- ----------------------------------------------------------------------- -->

Mean and median in normal distribution
========================================================
left: 40%

```{r fig.height=10, echo=FALSE}
dens_h <- g_nd + geom_density(fill = "white") +
  theme(axis.text.y = element_blank())

box_h <- g_nd_y + geom_boxplot() +
  coord_flip() +
  theme(axis.text.y = element_blank())

gridExtra::grid.arrange(dens_h, box_h, ncol = 1)
```

***

```{r, fig.height=10, fig.width=12, echo=FALSE}
nd_mean <- mean(nd$x)
nd_median <- median(nd$x)
nd_sd <- sd(nd$x)
nd_iqr <- quantile(nd$x)

dens_h_mean <- dens_h + 
  geom_vline(xintercept = nd_mean, color = "blue", lwd = 2, alpha = 0.4) +
  geom_vline(xintercept = nd_mean + nd_sd, color = "blue", alpha = 0.4) +
  geom_vline(xintercept = nd_mean - nd_sd, color = "blue", alpha = 0.4) +
  labs(title = "mean + standard deviation")

dens_h_median <- dens_h + 
  geom_vline(xintercept = nd_median, color = "red", lwd = 2, alpha = 0.4) +
  geom_vline(xintercept = nd_iqr[4], color = "red", alpha = 0.4) +
  geom_vline(xintercept = nd_iqr[2], color = "red", alpha = 0.4) +
  labs(title = "median + interquartile range")

box_h_mean <- box_h + 
  geom_hline(yintercept = nd_mean, color = "blue", lwd = 2, alpha = 0.4) +
  geom_hline(yintercept = nd_mean + nd_sd, color = "blue", alpha = 0.4) +
  geom_hline(yintercept = nd_mean - nd_sd, color = "blue", alpha = 0.4)

box_h_median <- box_h + 
  geom_hline(yintercept = nd_median, color = "red", lwd = 2, alpha = 0.4) +
  geom_hline(yintercept = nd_iqr[4], color = "red", alpha = 0.4) +
  geom_hline(yintercept = nd_iqr[2], color = "red", alpha = 0.4)

gridExtra::grid.arrange(dens_h_mean,  dens_h_median, box_h_mean, box_h_median, ncol = 2, nrow = 2)
```

<!-- =============================================== -->

Is my distribution normal?
========================================================
type: sub-section

<!-- ----------------------------------------------------------------------- -->

Is my distribution normal?
========================================================

## Visual aids

- Density plot
- Q-Q plot (quantile-quantile plot)  
   `qqnorm(x)` nebo  
   `ggplot(data, aes(sample = x)) + geom_qq()`
   
## Statistical hypothesis test

- Shapiro-Wilk test  
   `shapiro.test()`
- Kolmogorov-Smirnov normality test

<!-- ----------------------------------------------------------------------- -->

Q-Q plot
========================================================

```{r}
ggplot(nd, aes(x)) + 
  geom_density()
```

***

```{r}
ggplot(nd, aes(sample = x)) + 
  geom_qq(alpha = 0.4)
```

<!-- ----------------------------------------------------------------------- -->

Shapiro-Wilk normality test
========================================================

- $H_0$ (null hypothesis): *Values fit normal distribution.*  
- $H_A$ (alternative hypothesis): *Values do not fit normal distribution.*

- **p-value**: *probability* of the event that observed values fit normal distribution 
- p > 0.05: Fail to reject null hypothesis.  
- *Significance level* = 0.05 -- Event occurs in less than 5% of cases

```{r}
shapiro.test(nd$x)
```

<!-- ----------------------------------------------------------------------- -->

Data distribution shapes
========================================================

<img src="fig/distributions2.png" height=700>

<!-- ----------------------------------------------- -->

Transforming data
========================================================
incremental: false

- Many (!) statistical methods suppose the distribution of data is normal.
- **Parametric** vs **non-parametric** statistical methods.
- Most of (our) real world data is not normal.
- Data are transformed using various methods...

- Natural/Base 10 logarithms: `log10(x)`
- Square root: `sqrt(x)`

- Multimodal distributions?

<!-- ----------------------------------------------- -->

Transformations
========================================================
title: false

<img src="fig/transformations3.png" height=800>

<!-- ----------------------------------------------- -->

Relative position of a data point in a data set
========================================================
type: sub-section

<!-- ----------------------------------------------- -->

Z--Score
========================================================
incremental: false

- Recall what is standard deviation?
- How many **standard deviations** is the data point from the **mean**?

$$z-score = \frac{x_i-\overline{x}}{s}$$

- Why is this useful?
- What if we count z-scores for the whole dataset?

<!-- ----------------------------------------------- -->

Z--Score
========================================================
title: false

<img src="fig/normal_dist.png" height=1000>

<!-- ----------------------------------------------- -->
